package Advanced.UnionFind;

public class MinMalwareSpread {

    private int[] parent;
    private int[] size;
    private int cnt;

    public int minMalwareSpread(int[][] graph, int[] initial) {
        cnt = graph.length;
        size = new int[graph.length];
        parent = new int[graph.length];
        for (int i=0; i<graph.length; i++) {
            parent[i] = i;
            size[i] = 1;
        }
        for (int i=0; i<graph.length; i++) {
            for (int j=i+1; j<graph.length; j++) {
                if (graph[i][j] == 1) {
                    union(i, j);
                }
            }
        }
        int[] count = new int[graph.length];
        int min = Integer.MAX_VALUE;
        for (int i : initial) {
            int root = find(i);
            count[root] ++;
            if (i < min) min = i;
        }
        int maxSize = 0;
        int index = 0;
        boolean flag = true;
        for (int i : initial) {
            int root = find(i);
            if (count[root] == 1) {
                flag = false;
                if (size[root] > maxSize) {
                    maxSize = size[root];
                    index = i;
                }
                else if (size[root] == maxSize && i < index) {
                    index = i;
                }
            }
        }
        if (flag) index = min;
        return index;
    }

    public int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }

    public void union(int x, int y) {
        int xRoot = find(x);
        int yRoot = find(y);
        if (xRoot == yRoot) return;
        if (size[xRoot] >= size[yRoot]) {
            parent[yRoot] = xRoot;
            size[xRoot] += size[yRoot];
        }
        else {
            parent[xRoot] = yRoot;
            size[yRoot] += size[xRoot];
        }
        cnt --;
    }

    public static void main(String[] args) {
        int[][] graph = {{1,0,0,0},{0,1,0,0},{0,0,1,1},{0,0,1,1}};
        int[] initial = {3,1};
//        int[] initial = {0,1,2};

//        int[][] graph = {{1,0,0,0,0,0},{0,1,0,0,0,0},{0,0,1,0,0,0},{0,0,0,1,1,0},{0,0,0,1,1,0},{0,0,0,0,0,1}};
//        int[] initial = {5, 0};

//        int[][] graph = {{1,1,0,0,0,0,0,0,0,0},{1,1,0,0,0,0,0,0,0,1},{0,0,1,0,1,0,0,0,0,1},{0,0,0,1,0,0,0,0,0,1},{0,0,1,0,1,0,1,0,0,1},{0,0,0,0,0,1,1,0,0,0},{0,0,0,0,1,1,1,0,0,1},{0,0,0,0,0,0,0,1,1,0},{0,0,0,0,0,0,0,1,1,0},{0,1,1,1,1,0,1,0,0,1}};
//        int[] initial = {9,0,2};

//        int[][] graph = {{1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},{1,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0},{0,1,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0},{0,0,0,1,0,1,1,0,0,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1},{0,0,1,0,0,1,1,0,0,1,0,1,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,1,0},{0,1,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1,0},{0,0,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},{1,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0},{0,0,0,0,0,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1},{0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},{0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0},{0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0},{0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0},{0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0},{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0},{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1},{0,0,0,1,0,1,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1},{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0},{0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},{0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0},{0,0,0,0,0,1,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1}};
//        int[] initial = {3, 20 ,23};
        MinMalwareSpread minMalwareSpread = new MinMalwareSpread();
        int res = minMalwareSpread.minMalwareSpread(graph, initial);
        System.out.println(res);
    }
}
